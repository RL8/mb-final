name: Frontend CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'app.vue'
      - 'nuxt.config.ts'
      - 'package.json'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'app.vue'
      - 'nuxt.config.ts'
      - 'package.json'
  workflow_dispatch:

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install
        
    - name: Lint with ESLint
      run: |
        npx eslint . --ext .vue,.js,.jsx,.cjs,.mjs,.ts,.tsx,.cts,.mts --fix || echo "Linting issues found"
        
    - name: Format check with Prettier
      run: |
        npx prettier --check . || echo "Formatting issues found"
        
    - name: Run tests
      run: |
        npm test || echo "No tests found or tests failed"

  build-and-deploy:
    needs: lint-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install
        
    - name: Build the Nuxt.js app
      run: npm run build
      
    - name: Deploy to Droplet
      run: |
        # Create SSH key
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        echo -e "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null" > ~/.ssh/config
        
        # Create the directory on the server if it doesn't exist
        ssh -i ~/.ssh/id_rsa root@${{ secrets.DROPLET_IP }} "mkdir -p /var/www/mindbridge"
        
        # Copy the built files to the server
        rsync -avz -e "ssh -i ~/.ssh/id_rsa" \
          .output/public/ \
          root@${{ secrets.DROPLET_IP }}:/var/www/mindbridge/
        
        # Update Nginx configuration if needed
        ssh -i ~/.ssh/id_rsa root@${{ secrets.DROPLET_IP }} "
          if [ ! -f /etc/nginx/sites-available/mindbridge ]; then
            cat > /etc/nginx/sites-available/mindbridge << 'EOL'
server {
    listen 80;
    server_name _;

    # Frontend
    location / {
        root /var/www/mindbridge;
        index index.html;
        try_files \$uri \$uri/ /index.html;
    }

    # API
    location /api {
        proxy_pass http://localhost:8000;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOL
            ln -sf /etc/nginx/sites-available/mindbridge /etc/nginx/sites-enabled/
            nginx -t && systemctl reload nginx
          fi
        "
